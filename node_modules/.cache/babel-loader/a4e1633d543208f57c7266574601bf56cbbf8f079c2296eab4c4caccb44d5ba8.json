{"ast":null,"code":"var _jsxFileName = \"/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/ReactFlowSection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background, getConnectedEdges, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/base.css';\nimport \"./ReactFlowSection.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'input node'\n  },\n  position: {\n    x: 0,\n    y: 5\n  },\n  style: {\n    fontSize: '10px',\n    color: 'rgb(67, 67, 67)',\n    borderRadius: '3px',\n    padding: '4px',\n    width: '8rem',\n    textAlign: 'center',\n    backgroundColor: `rgb(231, 231, 255)`,\n    border: '1px solid rgb(231, 231, 231)'\n  }\n}];\nconst initialEdges = [];\nlet id = -5;\nconst getId = () => `dndnode_${id++}`;\nconst ReactFlowSection = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const getNodes = useReactFlow();\n  const [state, setState] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const nodeStyle = {\n    border: '1px solid red',\n    width: '10rem',\n    backgroundColor: 'rgb(231, 231, 255',\n    borderRadius: '3px'\n  };\n  const connectedStyle = {\n    border: '1px solid black',\n    width: '10rem',\n    backgroundColor: 'rgb(231, 231, 255)',\n    borderRadius: '3px'\n  };\n  useEffect(() => {\n    console.log(\"Edges:\", edges);\n    console.log(\"Nodes:\", nodes);\n    edges.forEach(edge => {\n      const srcNode = nodes.find(node => node.id === edge.target);\n      srcNode.style = {\n        border: '1px solid black',\n        width: '10rem',\n        backgroundColor: 'rgb(231, 231, 255)',\n        borderRadius: '3px'\n      };\n      console.log(srcNode.style);\n    });\n  }, [nodes, edges]);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const data = JSON.parse(event.dataTransfer.getData('application/reactflow'));\n\n    // check if the dropped element is valid\n\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type: 'default',\n      position,\n      style: nodeStyle,\n      data: {\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dragged_body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dragg _output\",\n            children: data.input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dragg _name\",\n            children: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dragg _input\",\n            children: data.output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dndflow\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reactflow-wrapper\",\n      ref: reactFlowWrapper,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onInit: setReactFlowInstance,\n        onDrop: onDrop,\n        onDragOver: onDragOver,\n        fitView: true,\n        Background: true,\n        children: /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(ReactFlowSection, \"Om9JS7SBn9g0wqi7KlQRKD+WiBg=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c = ReactFlowSection;\nexport default ReactFlowSection;\nvar _c;\n$RefreshReg$(_c, \"ReactFlowSection\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","getConnectedEdges","useReactFlow","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","style","fontSize","color","borderRadius","padding","width","textAlign","backgroundColor","border","initialEdges","getId","ReactFlowSection","_s","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","getNodes","state","setState","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","nodeStyle","connectedStyle","console","log","forEach","edge","srcNode","find","node","target","onDrop","reactFlowBounds","current","getBoundingClientRect","JSON","parse","getData","project","clientX","left","clientY","top","newNode","className","children","input","fileName","_jsxFileName","lineNumber","columnNumber","name","output","nds","concat","ref","onInit","fitView","_c","$RefreshReg$"],"sources":["/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/ReactFlowSection.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  getConnectedEdges,\n  useReactFlow\n} from 'reactflow';\nimport 'reactflow/dist/base.css';\nimport \"./ReactFlowSection.css\"\n\n\nconst initialNodes = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'input node' },\n    position: { x: 0, y: 5 },\n    style: { fontSize: '10px',  color: 'rgb(67, 67, 67)', borderRadius: '3px', padding: '4px', width: '8rem', textAlign: 'center', backgroundColor: `rgb(231, 231, 255)`, border: '1px solid rgb(231, 231, 231)' }\n  },\n];\n\nconst initialEdges = [];\n\nlet id = -5;\nconst getId = () => `dndnode_${id++}`;\n\nconst ReactFlowSection = () => {\n\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const getNodes = useReactFlow()\n  const [state, setState] = useState(false);\n\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n\n  }, []);\n\n  const nodeStyle = {\n    border: '1px solid red',\n    width: '10rem',\n    backgroundColor: 'rgb(231, 231, 255',\n    borderRadius: '3px'\n\n  }\n\n  const connectedStyle = {\n    border: '1px solid black',\n    width: '10rem', \n    backgroundColor: 'rgb(231, 231, 255)', \n    borderRadius: '3px'\n  }\n\n  useEffect(()=> {\n    console.log(\"Edges:\",edges)\n    console.log(\"Nodes:\",nodes)\n  \n      edges.forEach(edge => {\n  \n        const srcNode = nodes.find(node => node.id === edge.target)\n        srcNode.style = {border: '1px solid black', width: '10rem', backgroundColor: 'rgb(231, 231, 255)', borderRadius: '3px'}\n        console.log(srcNode.style)\n      })\n  \n  \n    },[nodes, edges])\n\n\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n      const data = JSON.parse(event.dataTransfer.getData('application/reactflow'))\n\n\n      // check if the dropped element is valid\n\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n\n      const newNode = {\n        id: getId(),\n        type: 'default',\n        position,\n        style: nodeStyle,\n        data: {\n          label:\n            <div className='dragged_body'>\n              <div className='dragg _output'>{data.input}</div>\n              <div className='dragg _name'>{data.name}</div>\n              <div className='dragg _input'>{data.output}</div>\n            </div>\n        },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    [reactFlowInstance]\n  );\n\n  return (\n    <div className=\"dndflow\">\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            onInit={setReactFlowInstance}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            fitView\n            Background\n          >\n            <Background />\n          </ReactFlow>\n        </div>\n    </div>\n  );\n};\n\nexport default ReactFlowSection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}