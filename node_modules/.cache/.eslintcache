[{"/home/aaruni/Github/workflow_assignment/workflow-app/src/index.js":"1","/home/aaruni/Github/workflow_assignment/workflow-app/src/App.js":"2","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/WorkFlowList.jsx":"3","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/WorkFlowItems.jsx":"4","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/Designer.jsx":"5","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/DesignModules.jsx":"6","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/ReactFlowSection.jsx":"7"},{"size":204,"mtime":1680959846416,"results":"8","hashOfConfig":"9"},{"size":571,"mtime":1681150053560,"results":"10","hashOfConfig":"9"},{"size":1221,"mtime":1681093325857,"results":"11","hashOfConfig":"9"},{"size":684,"mtime":1680969374214,"results":"12","hashOfConfig":"9"},{"size":1731,"mtime":1681093606072,"results":"13","hashOfConfig":"9"},{"size":813,"mtime":1681020896864,"results":"14","hashOfConfig":"9"},{"size":3200,"mtime":1681148441996,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"xpcumr",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"19"},"/home/aaruni/Github/workflow_assignment/workflow-app/src/index.js",[],[],[],"/home/aaruni/Github/workflow_assignment/workflow-app/src/App.js",[],[],"/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/WorkFlowList.jsx",["41"],[],"import React, { useState, useEffect } from 'react'\nimport \"./WorkFlowList.css\"\nimport WorkFlowItems from './WorkFlowItems'\nimport axios from 'axios'\n\n\nconst WorkFlowList = () => {\n\n    const [detail, setDetail] = useState([]);\n\n    useEffect(() => {\n        axios.get('https://64307b10d4518cfb0e50e555.mockapi.io/workflow')\n            .then(response => setDetail(response.data))\n            .catch(error => console.log(error));\n    }, []);\n\n\n\n  return (\n    <>\n    <div className='workflow_heading'>Workflows</div>\n    {detail.length != 0 ?\n    <div className='workflow_body'>\n        <div>\n        <div className='workflow_details'>\n            <div className='workflow_value name'>Name</div>\n            <div className='workflow_value inputtype'>Input Type</div>\n            <div className='workflow_value date_created'>Created At</div>\n        </div>\n\n        {detail.map((val)=>{\n            return <WorkFlowItems \n                key = {val.id}\n                name = {val.name}\n                created = {val.createdAt}\n                input_type = {val.input_type}\n            />\n        })}\n        </div>\n    </div> : <h1 className='loading_page'>Loading...</h1>\n    }\n    </>\n  )\n}\n\nexport default WorkFlowList","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/WorkFlowItems.jsx",[],[],"/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/Designer.jsx",["42"],[],"import React, { useState, useEffect} from 'react'\nimport \"./Designer.css\"\nimport DesignModules from './DesignModules'\nimport axios from 'axios'\nimport { useLocation } from 'react-router-dom'\nimport ReactFlowSection from './ReactFlowSection'\n\nconst Designer = (props) => {\n\n    const [detail, setDetail] = useState([]);\n    const location = useLocation()\n\n    useEffect(() => {\n        axios.get('https://64307b10d4518cfb0e50e555.mockapi.io/modules?page=1&limit=5')\n            .then(response => setDetail(response.data))\n            .catch(error => console.log(error));\n    }, []);\n\n\n\n  return (\n    <>\n        <div className='designer_body'>\n            <div className='designer_heading'><span>Workflow Name: {location.state.value}</span></div>\n            {detail.length !=0 ?\n            <div className='lowerDesign_body'>\n                <div className='lowerDesign_left'>\n                    <h3 className='moduleHead'>\n                        Modules\n                    </h3>\n                    {detail.map((value)=>{\n                        return (\n                            <div>\n                        <DesignModules \n                            key={value.id}\n                            name={value.name}\n                            input={value.input_type}\n                            output={value.output_type} \n                        />\n                        </div>\n                        )\n                    })}\n                    \n                </div>\n                <div className='lowerDesign_right'>\n                    <ReactFlowSection />\n                </div>\n            </div>\n            : <h1 className='loading_page'>Loading...</h1>}\n        </div>\n    </>\n  )\n}\n\nexport default Designer","/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/DesignModules.jsx",[],[],"/home/aaruni/Github/workflow_assignment/workflow-app/src/Components/ReactFlowSection.jsx",["43","44","45"],[],"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport ReactFlow, {\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Background,\n  useReactFlow\n} from 'reactflow';\nimport 'reactflow/dist/base.css';\nimport \"./ReactFlowSection.css\"\n\n\nconst initialNodes = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'input node' },\n    position: { x: 0, y: 5 },\n    style: {\n      fontSize: '10px',\n      color: 'rgb(67, 67, 67)',\n      borderRadius: '3px',\n      padding: '4px',\n      width: '8rem',\n      textAlign: 'center',\n      backgroundColor: `rgb(231, 231, 255)`,\n      border: '1px solid rgb(231, 231, 231)'\n    }\n  },\n];\n\nconst initialEdges = [];\n\nlet id = -5;\nconst getId = () => `dndnode_${id++}`;\n\nconst ReactFlowSection = () => {\n\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const getNodes = useReactFlow()\n\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n\n  }, []);\n\n  const nodeStyle = {\n    border: '1px solid red',\n    width: '10rem',\n    backgroundColor: 'rgb(231, 231, 255',\n    borderRadius: '3px'\n\n  }\n\n  const connectedStyle = {\n    border: '1px solid black',\n    width: '10rem',\n    backgroundColor: 'rgb(231, 231, 255',\n    borderRadius: '3px'\n\n  }\n\n  useEffect(() => {\n\n    edges.forEach(edge => {\n      const srcNode = nodes.find(node => node.id === edge.target)\n      srcNode.style = connectedStyle \n    })\n\n  },[edges])\n\n\n  const onDrop = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n      const data = JSON.parse(event.dataTransfer.getData('application/reactflow'))\n\n\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n\n      const newNode = {\n        id: getId(),\n        type: 'default',\n        position,\n        style: nodeStyle,\n        data: {\n          label:\n            <div className='dragged_body'>\n              <div className='dragg _output'>{data.input}</div>\n              <div className='dragg _name'>{data.name}</div>\n              <div className='dragg _input'>{data.output}</div>\n            </div>\n        },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n    },\n    [reactFlowInstance]\n  );\n\n  return (\n    <div className=\"dndflow\">\n      <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={setReactFlowInstance}\n          onDrop={onDrop}\n          onDragOver={onDragOver}\n          fitView\n          Background\n        >\n          <Background />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n\nexport default ReactFlowSection;",{"ruleId":"46","severity":1,"message":"47","line":22,"column":20,"nodeType":"48","messageId":"49","endLine":22,"endColumn":22},{"ruleId":"46","severity":1,"message":"47","line":25,"column":28,"nodeType":"48","messageId":"49","endLine":25,"endColumn":30},{"ruleId":"50","severity":1,"message":"51","line":43,"column":9,"nodeType":"52","messageId":"53","endLine":43,"endColumn":17},{"ruleId":"54","severity":1,"message":"55","line":78,"column":5,"nodeType":"56","endLine":78,"endColumn":12,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":111,"column":5,"nodeType":"56","endLine":111,"endColumn":24,"suggestions":"59"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'getNodes' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connectedStyle' and 'nodes'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useCallback has missing dependencies: 'nodeStyle' and 'setNodes'. Either include them or remove the dependency array.",["61"],{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [connectedStyle, edges, nodes]",{"range":"66","text":"67"},"Update the dependencies array to be: [nodeStyle, reactFlowInstance, setNodes]",{"range":"68","text":"69"},[1740,1747],"[connectedStyle, edges, nodes]",[2629,2648],"[nodeStyle, reactFlowInstance, setNodes]"]